name: ETH Anchor → GitHub JSON

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"    # wake every 5 minutes

permissions:
  contents: write

concurrency:
  group: eth-anchor
  cancel-in-progress: false

env:
  PRIMARY_URL: https://ethusd-anchor.vercel.app/api/eth-snapshot
  FALLBACK_URL: https://raw.githubusercontent.com/mobilemid/ethusd-anchor/refs/heads/main/data/latest_eth_snapshot.json

jobs:
  anchor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Gate to 01/07/13/19:35 CT (sleep if <=10m early; allow 5m late)
      - name: Time gate (01/07/13/19:35 CT) with early-wait / late-grace
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          NOW_CT=$(TZ=America/Chicago date +%s)
          TODAY=$(TZ=America/Chicago date +%F)
          H=("01" "07" "13" "19")
          TARGET=""
          for hh in "${H[@]}"; do
            t=$(TZ=America/Chicago date -d "$TODAY $hh:35:00" +%s)
            if [ "$NOW_CT" -le "$t" ]; then TARGET="$t"; break; fi
          done
          if [ -z "$TARGET" ]; then
            TOM=$(TZ=America/Chicago date -d 'tomorrow' +%F)
            TARGET=$(TZ=America/Chicago date -d "$TOM 01:35:00" +%s)
          fi
          MAX_EARLY=600   # wait up to 10m if early
          MAX_LATE=300    # accept up to 5m late

          if [ "$TARGET" -gt "$NOW_CT" ]; then
            SLEEP=$(( TARGET - NOW_CT ))
            if [ "$SLEEP" -le "$MAX_EARLY" ]; then
              echo "Early by ${SLEEP}s — sleeping to hit slot…"
              sleep "$SLEEP"
            else
              echo "Too early by ${SLEEP}s (> ${MAX_EARLY}). Skipping this tick."
              echo "skip=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          NOW2=$(TZ=America/Chicago date +%s)
          LAG=$(( NOW2 - TARGET ))
          if [ "$LAG" -gt "$MAX_LATE" ]; then
            echo "Too late (lag=${LAG}s > ${MAX_LATE}s). Skipping."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "skip=false" >> "$GITHUB_OUTPUT"
          echo "slot_epoch=$TARGET" >> "$GITHUB_OUTPUT"
          echo "ts_ct=$(TZ=America/Chicago date --iso-8601=seconds)" >> "$GITHUB_OUTPUT"

      - name: Fetch anchor (PRIMARY Vercel, fallback GitHub) + validate + freshness
        id: fetch
        if: steps.gate.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          TMP=data/_anchor_tmp.json

          # --- helper: validate that file looks like our schema
          validate() {
            jq -e '.anchor.price|numbers' "$1" >/dev/null 2>&1
          }

          # --- try PRIMARY (Vercel) up to 90s, 5s backoff
          source="vercel"
          ok=0
          for i in $(seq 1 18); do
            curl -fsSL -H 'Cache-Control: no-cache' \
              "${PRIMARY_URL}?t=${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-${i}" \
              -o "$TMP" || true
            if validate "$TMP"; then ok=1; break; fi
            sleep 5
          done

          # --- fallback to GitHub RAW if primary never validated
          if [ "$ok" = "0" ]; then
            source="github-fallback"
            curl -fsSL -H 'Cache-Control: no-cache' \
              "${FALLBACK_URL}?cb=${GITHUB_RUN_ID}" -o "$TMP"
            validate "$TMP"  # will throw if invalid
          fi

          # --- freshness checks
          SLOT=${{ steps.gate.outputs.slot_epoch }}
          fresh=false
          reason=""

          # prefer .clock.ts_ct if present
          TS_STR=$(jq -r '.clock.ts_ct // empty' "$TMP")
          if [ -n "$TS_STR" ]; then
            GOT=$(TZ=America/Chicago date -d "$TS_STR" +%s)
            if [ "$GOT" -ge "$SLOT" ]; then fresh=true; reason="clock.ts_ct>=slot"; fi
          fi

          if [ "$fresh" = "false" ]; then
            LOC=$(jq -r '.anchor.local_timestamp // empty' "$TMP")
            if [ -n "$LOC" ]; then
              GOT=$(TZ=America/Chicago date -d "$LOC" +%s)
              DELTA=$(( GOT - SLOT )); DELTA=${DELTA#-}
              if [ "$DELTA" -le 600 ]; then fresh=true; reason="local_timestamp within ±10m"; fi
            fi
          fi

          if [ "$fresh" = "false" ]; then
            AGE=$(jq -r '.anchor.anchor_age_seconds // empty' "$TMP" || true)
            if [ -n "$AGE" ] && [ "$AGE" -le 1800 ]; then fresh=true; reason="anchor_age_seconds<=1800"; fi
          fi

          # --- inject clock/debug + canonicalize (guarantees a diff)
          TS_CT=${{ steps.gate.outputs.ts_ct }}
          jq --arg ts "$TS_CT" \
             --arg src "$source" \
             --arg run "${GITHUB_RUN_ID}.${GITHUB_RUN_ATTEMPT}" \
             --argjson slot ${{ steps.gate.outputs.slot_epoch }} '
               .clock.ts_ct = $ts
             | .clock.anchor_target_epoch = $slot
             | .debug.source = $src
             | .debug.run_id = $run
          ' "$TMP" | jq -S '.' > data/latest_eth_snapshot.json

          # --- append CSV log
          if [ ! -f data/anchor_log.csv ]; then
            echo "ts_ct,anchor,used,age_sec,cross_price,disc_level,disc_diff_pct,source" > data/anchor_log.csv
          fi
          jq -r --arg ts "$TS_CT" --arg src "$source" '
            [
              $ts,
              .anchor.price,
              .anchor.used,
              (.anchor.anchor_age_seconds // ""),
              (.cross_check.price // ""),
              (.cross_check.discrepancy.level // ""),
              (.cross_check.discrepancy.diff_pct // ""),
              $src
            ] | @csv
          ' data/latest_eth_snapshot.json >> data/anchor_log.csv

          echo "fresh=$fresh" >> "$GITHUB_OUTPUT"
          echo "source=$source" >> "$GITHUB_OUTPUT"
          echo "reason=${reason:-n/a}" >> "$GITHUB_OUTPUT"

      - name: Show pending diff
        if: steps.gate.outputs.skip != 'true'
        run: |
          git status -s
          echo "--- files changed (staged after add) ---"
          git add data/latest_eth_snapshot.json data/anchor_log.csv
          git diff --cached --name-only || true

      - name: Commit & push (only when fresh)
        if: steps.fetch.outputs.fresh == 'true'
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --cached --quiet; then
            echo "Nothing to commit (unexpected)."
          else
            git commit -m "snapshot: ${{ steps.gate.outputs.ts_ct }} src=${{ steps.fetch.outputs.source }} reason=${{ steps.fetch.outputs.reason }}"
            git push
          fi
