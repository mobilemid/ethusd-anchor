name: ETH Anchor → GitHub JSON

on:
  schedule:
    - cron: "1 * * * *"            # hourly at :01 UTC
  workflow_dispatch:
    inputs:
      force_commit:
        description: "Commit even if snapshot is considered stale (manual runs only)"
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: eth-anchor
  cancel-in-progress: false

env:
  PRIMARY_URL: https://ethusd-anchor.vercel.app/api/eth-snapshot
  FALLBACK_RAW: https://raw.githubusercontent.com/mobilemid/ethusd-anchor/refs/heads/main/data/latest_eth_snapshot.json
  TZ: America/Chicago

jobs:
  anchor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch anchor (PRIMARY Vercel, fallback GitHub) + annotate freshness
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          OUT=data/latest_eth_snapshot.json
          TMP=data/_tmp.json

          get_json () {
            url="$1"
            curl -sS -w '%{http_code}' \
              -H 'Cache-Control: no-cache' \
              --connect-timeout 10 --max-time 25 \
              -o "$TMP" "${url}?t=${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-$(date +%s)" || true
          }

          # Try primary (Vercel) with a few retries
          ok=0
          for i in 1 2 3 4 5 6; do
            code=$(get_json "$PRIMARY_URL")
            if [ "$code" = "200" ] && jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then ok=1; break; fi
            echo "Vercel try $i failed (HTTP=$code). Sleep $((i*2))s…"
            sleep $((i*2))
          done

          # Fallback to GitHub RAW if needed
          if [ "$ok" = "0" ]; then
            echo "PRIMARY failed; trying fallback RAW…"
            code=$(curl -sS -w '%{http_code}' -o "$TMP" "$FALLBACK_RAW" || true)
            if [ "$code" != "200" ] || ! jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then
              echo "status=fail" >> $GITHUB_OUTPUT
              echo "::error::Both sources failed (HTTP=$code)."
              exit 0
            fi
          fi

          # ---- Freshness vs NOW (no slot gate) ----
          NOW_ISO=$(date --iso-8601=seconds)
          NOW_EPOCH=$(date +%s)
          LOW=$(( NOW_EPOCH - 900 ))     # 15m back
          HIGH=$(( NOW_EPOCH + 120 ))    # small lead tolerance

          fresh="false"; reason="no timestamps"
          # Prefer .clock.ts_ct if present
          ts_clock=$(jq -r '.clock.ts_ct // empty' "$TMP" || true)
          if [ -n "$ts_clock" ]; then
            t_epoch=$(date -d "$ts_clock" +%s || echo 0)
            if [ "$t_epoch" -ge "$LOW" ] && [ "$t_epoch" -le "$HIGH" ]; then fresh="true"; else reason="clock.ts_ct not within 15m of now"; fi
          else
            # else try anchor.local_timestamp
            lt=$(jq -r '.anchor.local_timestamp // empty' "$TMP" || true)
            if [ -n "$lt" ]; then
              t_epoch=$(date -d "$lt" +%s || echo 0)
              if [ "$t_epoch" -ge "$LOW" ] && [ "$t_epoch" -le "$HIGH" ]; then fresh="true"; else reason="local_timestamp not within 15m of now"; fi
            else
              # else fallback to age
              age=$(jq -r '.anchor.anchor_age_seconds // 999999' "$TMP")
              if [ "$age" != "null" ] && [ "$age" -le 1800 ]; then fresh="true"; else reason="age>1800s & no timestamps"; fi
            fi
          fi

          # Stamp clock info and write snapshot
          jq \
            --arg ts "$NOW_ISO" \
            --arg fr "$fresh" \
            --arg rr "$reason" \
            '.clock.ts_ct=$ts
             | .clock.fresh=$fr
             | .clock.fresh_reason=$rr' "$TMP" | jq --sort-keys '.' > "$OUT"

          echo "status=ok" >> $GITHUB_OUTPUT
          echo "fresh=$fresh" >> $GITHUB_OUTPUT
          echo "fresh_reason=$reason" >> $GITHUB_OUTPUT
          echo "Snapshot fresh? $fresh ($reason)"

          # Append CSV row for observability
          if [ ! -f data/anchor_log.csv ]; then
            echo "ts_ct,anchor,used,age_sec,cross_price,disc_level,disc_diff_pct,fresh,fresh_reason" > data/anchor_log.csv
          fi
          jq -r --arg ts "$NOW_ISO" --arg fr "$fresh" --arg rr "$reason" '
            [
              $ts, .anchor.price, .anchor.used,
              (.anchor.anchor_age_seconds // ""),
              (.cross_check.price // ""),
              (.cross_check.discrepancy.level // ""),
              (.cross_check.discrepancy.diff_pct // ""),
              $fr, $rr
            ] | @csv' "$OUT" >> data/anchor_log.csv

      - name: Commit & push
        # Always commit on the hourly schedule; for manual runs require fresh OR force_commit
        if: steps.fetch.outputs.status == 'ok' && (github.event_name == 'schedule' || steps.fetch.outputs.fresh == 'true' || inputs.force_commit)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest_eth_snapshot.json data/anchor_log.csv
          if git diff --cached --quiet; then
            echo "No file changes to commit."
            exit 0
          fi
          # avoid non-fast-forward push if a manual run also committed recently
          git pull --rebase origin "${GITHUB_REF_NAME:-main}" || true
          git commit -m "snapshot: $(date --iso-8601=seconds) (fresh=${{ steps.fetch.outputs.fresh }} reason='${{ steps.fetch.outputs.fresh_reason }}')"
          git push
