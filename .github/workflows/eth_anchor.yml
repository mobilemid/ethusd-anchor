name: ETH Anchor → GitHub JSON

on:
  workflow_dispatch:
  schedule:
    - cron: "*/1 * * * *"  # wake every minute

permissions:
  contents: write

concurrency:
  group: eth-anchor
  cancel-in-progress: false

env:
  CT_TZ: America/Chicago
  CB_TICKER_URL: https://api.coinbase.com/api/v3/brokerage/products/ETH-USD/ticker
  CB_BBA_URL: https://api.coinbase.com/api/v3/brokerage/best_bid_ask?product_ids=ETH-USD

jobs:
  anchor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Gate to 01/07/13/19:35 CT (with early-wait and late-grace)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          NOW_CT=$(TZ=${{ env.CT_TZ }} date +%s)
          TODAY=$(TZ=${{ env.CT_TZ }} date +%Y-%m-%d)
          SLOTS=("01:35:00" "07:35:00" "13:35:00" "19:35:00")
          TARGET=""

          for hhmmss in "${SLOTS[@]}"; do
            t=$(TZ=${{ env.CT_TZ }} date -d "$TODAY $hhmmss" +%s)
            if [ "$NOW_CT" -le "$t" ]; then TARGET="$t"; break; fi
          done
          if [ -z "$TARGET" ]; then
            TOM=$(TZ=${{ env.CT_TZ }} date -d 'tomorrow' +%Y-%m-%d)
            TARGET=$(TZ=${{ env.CT_TZ }} date -d "$TOM 01:35:00" +%s)
          fi

          MAX_EARLY=1200  # up to 20m early → wait
          MAX_LATE=1200   # up to 20m late → still proceed

          if [ $TARGET -gt $NOW_CT ]; then
            SLEEP=$(( TARGET - NOW_CT ))
            if [ $SLEEP -le $MAX_EARLY ]; then
              echo "Early by ${SLEEP}s — sleeping to hit the slot…"
              sleep $SLEEP
            fi
          fi

          NOW2=$(TZ=${{ env.CT_TZ }} date +%s)
          LAG=$(( NOW2 - TARGET ))
          if [ $LAG -gt $MAX_LATE ]; then
            echo "Too late (lag=${LAG}s > ${MAX_LATE}s). Skipping run."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "skip=false" >> $GITHUB_OUTPUT
          echo "target_epoch=$TARGET" >> $GITHUB_OUTPUT
          echo "lag_sec=$LAG" >> $GITHUB_OUTPUT
          echo "ts_ct=$(TZ=${{ env.CT_TZ }} date --iso-8601=seconds)" >> $GITHUB_OUTPUT

      - name: Fetch Coinbase Advanced Trade ticker x3 (median) with mid fallback
        id: anchor
        if: steps.gate.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail

          fetch_ticker () {
            curl -sS -H 'Accept: application/json' \
                 -H 'Cache-Control: no-cache' \
                 --connect-timeout 10 --max-time 20 \
                 "${{ env.CB_TICKER_URL }}"
          }

          # Take 3 samples ~1s apart
          T1=$(fetch_ticker)
          sleep 1
          T2=$(fetch_ticker)
          sleep 1
          T3=$(fetch_ticker)

          # Validate JSONs contain price and time
          for X in "$T1" "$T2" "$T3"; do
            echo "$X" | jq -e '.price|numbers and .time' >/dev/null
          done

          # Extract prices and Coinbase server times
          P1=$(echo "$T1" | jq -r '.price')
          P2=$(echo "$T2" | jq -r '.price')
          P3=$(echo "$T3" | jq -r '.price')

          # Median
          MEDIAN=$(printf "%s\n%s\n%s\n" "$P1" "$P2" "$P3" | sort -n | sed -n '2p')

          # Use the most recent ticker for "as_of" (third)
          ASOF=$(echo "$T3" | jq -r '.time')

          # Compute anchor age vs now (server time may be RFC3339 or epoch ms)
          NOW_UNIX=$(date +%s)
          # Try parse ASOF as RFC3339 first, else epoch ms
          if date -d "$ASOF" +%s >/dev/null 2>&1; then
            ASOF_UNIX=$(date -d "$ASOF" +%s)
          else
            # assume ms epoch
            ASOF_UNIX=$(( ${ASOF%%.*} / 1000 ))
          fi
          AGE=$(( NOW_UNIX - ASOF_UNIX ))

          # If last trade appears stale (>10s), fetch best bid/ask mid
          USED="last_trade"
          MID=""
          if [ "$AGE" -gt 10 ] || [ -z "$MEDIAN" ]; then
            echo "Ticker appears stale (age=${AGE}s) or invalid — using best bid/ask mid."
            BBA=$(curl -sS -H 'Accept: application/json' \
                       -H 'Cache-Control: no-cache' \
                       --connect-timeout 10 --max-time 20 \
                       "${{ env.CB_BBA_URL }}")
            # shape: { "pricebooks": [ { "product_id": "ETH-USD", "bids":[{"price":...}], "asks":[{"price":...}] } ] }
            BID=$(echo "$BBA" | jq -r '.pricebooks[0].bids[0].price')
            ASK=$(echo "$BBA" | jq -r '.pricebooks[0].asks[0].price')
            if [ -n "$BID" ] && [ -n "$ASK" ]; then
              MID=$(awk -v b="$BID" -v a="$ASK" 'BEGIN{printf "%.2f", (b+a)/2}')
              MEDIAN="$MID"
              USED="mid_best_bid_ask"
            else
              echo "::error::Failed to read best bid/ask from Advanced Trade."
              exit 1
            fi
          fi

          # Build JSON
          mkdir -p data
          OUT=data/latest_eth_snapshot.json

          # Note: TradingView cross-check is intentionally marked unavailable here
          # (TV has no stable public JSON). You can add a second source later.
          jq -n --arg ts_ct "${{ steps.gate.outputs.ts_ct }}" \
                --arg used "$USED" \
                --arg price "$MEDIAN" \
                --arg asof "$ASOF" \
                --argjson age $AGE '
            {
              anchor: {
                price: ($price|tonumber),
                used: $used,
                as_of: $asof
              },
              cross_check: {
                source: "TRADINGVIEW_COINDBASE_ETHUSD",
                status: "unavailable",
                discrepancy: {
                  level: "n/a",
                  diff_pct: null
                }
              },
              clock: {
                ts_ct: $ts_ct
              },
              anchor_age_seconds: $age
            }' | jq --sort-keys '.' > "$OUT"

          # Log line (CSV)
          if [ ! -f data/anchor_log.csv ]; then
            echo "ts_ct,anchor,used,age_sec,cross_price,disc_level,disc_diff_pct,anchor_lag_sec" > data/anchor_log.csv
          fi
          echo "${{ steps.gate.outputs.ts_ct }},$MEDIAN,$USED,$AGE,,n/a,," >> data/anchor_log.csv

      - name: Commit & push
        if: steps.gate.outputs.skip != 'true'
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest_eth_snapshot.json data/anchor_log.csv
          git commit -m "anchor: ${{ steps.gate.outputs.ts_ct }} (lag=${{ steps.gate.outputs.lag_sec }}s)" || exit 0
          git push
