name: ETH Snapshot → Repo

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"   # wake every 5 min

permissions:
  contents: write

concurrency:
  group: eth-anchor
  cancel-in-progress: false

env:
  SNAPSHOT_URL: https://ethusd-anchor.vercel.app/api/eth-snapshot

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Gate to 01/07/13/19:35 CT (early-wait, late-grace)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          NOW_CT=$(TZ=America/Chicago date +%s)
          TODAY=$(TZ=America/Chicago date +%Y-%m-%d)
          H=("01" "07" "13" "19")
          TARGET=""
          for hh in "${H[@]}"; do
            t=$(TZ=America/Chicago date -d "$TODAY $hh:35:00" +%s)
            if [ "$NOW_CT" -le "$t" ]; then TARGET="$t"; break; fi
          done
          if [ -z "$TARGET" ]; then
            TOM=$(TZ=America/Chicago date -d 'tomorrow' +%Y-%m-%d)
            TARGET=$(TZ=America/Chicago date -d "$TOM 01:35:00" +%s)
          fi
          MAX_EARLY=600   # wait up to 10m if early
          MAX_LATE=300    # allow up to 5m late
          if [ $TARGET -gt $NOW_CT ]; then
            SLEEP=$(( TARGET - NOW_CT ))
            if [ $SLEEP -le $MAX_EARLY ]; then
              echo "Early by ${SLEEP}s — sleeping to hit anchor…"
              sleep $SLEEP
            fi
          fi
          NOW2=$(TZ=America/Chicago date +%s)
          LAG=$(( NOW2 - TARGET ))
          if [ $LAG -gt $MAX_LATE ]; then
            echo "Too late (lag=${LAG}s > ${MAX_LATE}s). Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "target_epoch=$TARGET" >> $GITHUB_OUTPUT
          echo "lag_sec=$LAG" >> $GITHUB_OUTPUT
          echo "ts_ct=$(TZ=America/Chicago date --iso-8601=seconds)" >> $GITHUB_OUTPUT

      - name: Fetch snapshot (retry + cache-buster + validate)
        id: fetch
        if: steps.gate.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          TMP=data/_snapshot_tmp.json
          ok=0
          for i in 1 2 3 4 5 6; do
            code=$(curl -sS -w '%{http_code}' \
                     -H 'Cache-Control: no-cache' \
                     --connect-timeout 10 --max-time 25 \
                     --retry 3 --retry-all-errors \
                     -o "$TMP" "$SNAPSHOT_URL?t=${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-${i}" || true)
            if [ "$code" = "200" ] && jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then
              ok=1; break
            fi
            echo "Attempt $i failed (HTTP=$code). Sleeping $((i*i))s…"
            sleep $((i*i))
          done
          if [ "$ok" = "0" ]; then
            echo "::warning::Fetch/validate failed; skipping commit."
            echo "fetch_status=skipped" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Inject clock diagnostics to guarantee a diff and aid freshness checks
          jq --arg ts "${{ steps.gate.outputs.ts_ct }}" \
             --argjson anchor_target_epoch ${{ steps.gate.outputs.target_epoch }} \
             --argjson anchor_lag_sec ${{ steps.gate.outputs.lag_sec }} '
             .clock.ts_ct = $ts
             | .clock.anchor_target_epoch = $anchor_target_epoch
             | .clock.anchor_lag_sec = $anchor_lag_sec
          ' "$TMP" | jq --sort-keys '.' > data/latest_eth_snapshot.json

          if [ ! -f data/anchor_log.csv ]; then
            echo "ts_ct,anchor,used,age_sec,cross_price,disc_level,disc_diff_pct,anchor_lag_sec" > data/anchor_log.csv
          fi
          jq -r --arg ts "${{ steps.gate.outputs.ts_ct }}" --arg lag "${{ steps.gate.outputs.lag_sec }}" '
            [
              $ts,
              .anchor.price,
              .anchor.used,
              (.anchor.anchor_age_seconds // ""),
              (.cross_check.price // ""),
              (.cross_check.discrepancy.level // ""),
              (.cross_check.discrepancy.diff_pct // ""),
              $lag
            ] | @csv
          ' data/latest_eth_snapshot.json >> data/anchor_log.csv
          echo "fetch_status=ok" >> $GITHUB_OUTPUT

      - name: Commit & push
        if: steps.fetch.outputs.fetch_status == 'ok'
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest_eth_snapshot.json data/anchor_log.csv
          git commit -m "snapshot: ${{ steps.gate.outputs.ts_ct }} (lag=${{ steps.gate.outputs.lag_sec }}s)" || exit 0
          git push
