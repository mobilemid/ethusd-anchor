name: ETH Anchor → GitHub JSON (Hourly :01)

on:
  schedule:
    # Run at 01 minute past every hour (UTC in GitHub; logic below uses America/Chicago for timestamps)
    - cron: "1 * * * *"
  workflow_dispatch:
    inputs:
      force_commit:
        description: "Commit even if snapshot is considered stale (forces a diff)"
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: eth-anchor
  cancel-in-progress: false

env:
  PRIMARY_URL: https://ethusd-anchor.vercel.app/api/eth-snapshot
  FALLBACK_RAW: https://raw.githubusercontent.com/mobilemid/ethusd-anchor/refs/heads/main/data/latest_eth_snapshot.json
  TZ: America/Chicago

jobs:
  anchor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch anchor (PRIMARY Vercel → fallback GitHub) + validate + freshness
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          OUT=data/latest_eth_snapshot.json
          TMP=data/_tmp.json

          echo "now_ct=$(TZ="$TZ" date --iso-8601=seconds)" >> $GITHUB_OUTPUT

          get_json () {
            url="$1"
            curl -sS -w '%{http_code}' \
              -H 'Cache-Control: no-cache' \
              --connect-timeout 10 --max-time 25 \
              --retry 2 --retry-all-errors \
              -o "$TMP" "${url}?t=${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-$(date +%s)" || true
          }

          ok=0
          for i in 1 2 3 4 5 6; do
            code=$(get_json "$PRIMARY_URL")
            if [ "$code" = "200" ] && jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then ok=1; break; fi
            echo "Vercel try $i failed (HTTP=$code). Sleep $((i*2))s…"
            sleep $((i*2))
          done

          if [ "$ok" = "0" ]; then
            echo "PRIMARY failed; trying fallback RAW…"
            code=$(curl -sS -w '%{http_code}' -o "$TMP" "$FALLBACK_RAW" || true)
            if [ "$code" != "200" ] || ! jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then
              echo "status=fail" >> $GITHUB_OUTPUT
              echo "fresh=false" >> $GITHUB_OUTPUT
              echo "fresh_reason=fetch failed (both sources)" >> $GITHUB_OUTPUT
              echo "::error::Fetch failed from both sources (HTTP=$code)."
              exit 0
            fi
          fi

          # ---------- Freshness (hourly runner @ :01) ----------
          # Accept if clock.ts_ct is within ±10m of NOW(CT), else accept if anchor_age_seconds ≤ 900.
          NOW_EPOCH=$(TZ="$TZ" date +%s)
          LOWER=$(( NOW_EPOCH - 600 ))
          UPPER=$(( NOW_EPOCH + 600 ))
          fresh="false"
          fresh_reason="unknown"

          ts_clock=$(jq -r '.clock.ts_ct // empty' "$TMP" || true)
          if [ -n "$ts_clock" ]; then
            t_epoch=$(TZ="$TZ" date -d "$ts_clock" +%s || echo 0)
            if [ "$t_epoch" -ge "$LOWER" ] && [ "$t_epoch" -le "$UPPER" ]; then
              fresh="true"; fresh_reason="clock.ts_ct within ±10m"
            else
              fresh="false"; fresh_reason="clock.ts_ct outside ±10m"
            fi
          else
            age=$(jq -r '.anchor.anchor_age_seconds // 999999' "$TMP")
            if [ "$age" != "null" ] && [ "$age" -le 900 ]; then
              fresh="true"; fresh_reason="anchor_age_seconds ≤ 900s"
            else
              fresh="false"; fresh_reason="no ts_ct and age>900s"
            fi
          fi

          # Inject diagnostics & (optionally) a guaranteed diff for manual Force Commit
          CT_NOW=$(TZ="$TZ" date --iso-8601=seconds)
          FORCE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_commit == 'true' }}"
          if [ "$FORCE" = "true" ]; then
            # ensure the JSON changes so the commit step has something to push
            jq --arg ts "$CT_NOW" \
               --arg fr "$fresh" --arg rr "$fresh_reason" \
               --arg run "$GITHUB_RUN_ID" --arg att "$GITHUB_RUN_ATTEMPT" \
               '.clock.ts_ct=$ts
                | .clock.fresh=$fr
                | .clock.fresh_reason=$rr
                | .meta.force_commit=true
                | .meta.force_commit_run_id=$run
                | .meta.force_commit_attempt=$att' "$TMP" | jq --sort-keys '.' > "$OUT"
          else
            jq --arg ts "$CT_NOW" \
               --arg fr "$fresh" --arg rr "$fresh_reason" \
               '.clock.ts_ct=$ts
                | .clock.fresh=$fr
                | .clock.fresh_reason=$rr' "$TMP" | jq --sort-keys '.' > "$OUT"
          fi

          echo "status=ok" >> $GITHUB_OUTPUT
          echo "fresh=$fresh" >> $GITHUB_OUTPUT
          echo "fresh_reason=$fresh_reason" >> $GITHUB_OUTPUT
          echo "Snapshot fresh? $fresh ($fresh_reason)"

          # Append CSV row for observability
          if [ ! -f data/anchor_log.csv ]; then
            echo "ts_ct,anchor,used,age_sec,cross_price,disc_level,disc_diff_pct,fresh,fresh_reason" > data/anchor_log.csv
          fi
          jq -r --arg ts "$CT_NOW" --arg fr "$fresh" --arg rr "$fresh_reason" '
            [
              $ts, .anchor.price, .anchor.used,
              (.anchor.anchor_age_seconds // ""),
              (.cross_check.price // ""),
              (.cross_check.discrepancy.level // ""),
              (.cross_check.discrepancy.diff_pct // ""),
              $fr, $rr
            ] | @csv' "$OUT" >> data/anchor_log.csv

      - name: Commit & push (fresh OR manual force)
        if: steps.fetch.outputs.status == 'ok' && (steps.fetch.outputs.fresh == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_commit == 'true'))
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest_eth_snapshot.json data/anchor_log.csv
          if git diff --cached --quiet; then
            echo "No file changes to commit."
            exit 0
          fi
          git commit -m "snapshot: ${{ steps.fetch.outputs.now_ct }} (fresh=${{ steps.fetch.outputs.fresh }} reason='${{ steps.fetch.outputs.fresh_reason }}')"
          git push
