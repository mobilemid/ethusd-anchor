name: ETH Anchor → GitHub JSON

on:
  schedule:
    - cron: "1 * * * *"          # run hourly at 1 minute past each hour
  workflow_dispatch:
    inputs:
      force_commit:
        description: "Commit even if snapshot is considered stale"
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: eth-anchor
  cancel-in-progress: false

env:
  PRIMARY_URL: https://ethusd-anchor.vercel.app/api/eth-snapshot
  FALLBACK_RAW: https://raw.githubusercontent.com/mobilemid/ethusd-anchor/refs/heads/main/data/latest_eth_snapshot.json
  TZ: America/Chicago

jobs:
  anchor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch anchor (PRIMARY Vercel, fallback GitHub) + validate + freshness
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          OUT=data/latest_eth_snapshot.json
          TMP=data/_tmp.json

          get_json () {
            url="$1"
            curl -sS -w '%{http_code}' \
              -H 'Cache-Control: no-cache' \
              --connect-timeout 10 --max-time 25 \
              -o "$TMP" "${url}?t=${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-$(date +%s)" || true
          }

          ok=0
          for i in 1 2 3 4 5 6; do
            code=$(get_json "$PRIMARY_URL")
            if [ "$code" = "200" ] && jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then ok=1; break; fi
            echo "Vercel try $i failed (HTTP=$code). Sleep $((i*2))s…"
            sleep $((i*2))
          done

          if [ "$ok" = "0" ]; then
            echo "PRIMARY failed; trying fallback RAW…"
            code=$(curl -sS -w '%{http_code}' -o "$TMP" "$FALLBACK_RAW" || true)
            if [ "$code" != "200" ] || ! jq -e '.anchor.price|numbers' "$TMP" >/dev/null 2>&1; then
              echo "status=fail" >> $GITHUB_OUTPUT
              echo "::error::Both sources failed (HTTP=$code)."
              exit 0
            fi
          fi

          NOW_CT=$(date --iso-8601=seconds)
          slot_epoch=$(date +%s)
          jq \
            --arg ts "$NOW_CT" \
            --argjson slot "$slot_epoch" \
            '.clock.ts_ct=$ts
             | .clock.anchor_target_epoch=$slot
             | .clock.fresh="true"
             | .clock.fresh_reason="hourly run (auto)"' "$TMP" | jq --sort-keys '.' > "$OUT"

          echo "status=ok" >> $GITHUB_OUTPUT
          echo "fresh=true" >> $GITHUB_OUTPUT
          echo "fresh_reason=hourly run (auto)"

          if [ ! -f data/anchor_log.csv ]; then
            echo "ts_ct,anchor,used,age_sec,cross_price,disc_level,disc_diff_pct,anchor_lag_sec,fresh,fresh_reason" > data/anchor_log.csv
          fi
          jq -r --arg ts "$NOW_CT" '
            [
              $ts, .anchor.price, .anchor.used,
              (.anchor.anchor_age_seconds // ""),
              (.cross_check.price // ""),
              (.cross_check.discrepancy.level // ""),
              (.cross_check.discrepancy.diff_pct // ""),
              "", "true", "hourly run (auto)"
            ] | @csv' "$OUT" >> data/anchor_log.csv

      - name: Commit & push
        if: steps.fetch.outputs.status == 'ok' && (steps.fetch.outputs.fresh == 'true' || inputs.force_commit)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest_eth_snapshot.json data/anchor_log.csv
          if git diff --cached --quiet; then
            echo "No file changes to commit."
            exit 0
          fi
          git commit -m "snapshot: ${NOW_CT} (hourly auto-refresh)"
          git push
